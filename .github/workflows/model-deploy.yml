name: Build and Deploy AI-GovBot to GKE (main Branch)
  
on:
  # Keep manual trigger
  workflow_dispatch:
  
  # Trigger after the 'Run Unit Tests' workflow completes
  workflow_run:
    workflows: ["Run Unit Tests"]
    types: [completed]
    branches:
      - main

env:
  PROJECT_ID: ${{ vars.PROJECT_ID}}
  ZONE: us-east1-d 
  CLUSTER_NAME: ai-govbot-cluster
  NAMESPACE: mlscopers
  # --- Define GAR image names ---
  GAR_LOCATION: us-east1 
  GAR_REPOSITORY_NAME: ai-govbot-repo 
  # --- Define image names WITHOUT tags for gcloud commands ---
  BACKEND_IMAGE_NAME_NO_TAG: us-east1-docker.pkg.dev/${{ vars.PROJECT_ID}}ai-govbot-repo/ai-govbot-backend
  FRONTEND_IMAGE_NAME_NO_TAG: us-east1-docker.pkg.dev/${{ vars.PROJECT_ID}}/ai-govbot-repo/ai-govbot-frontend
  # --- Define image names WITH :latest tag for build/push/deploy ---
  BACKEND_IMAGE_NAME_LATEST: us-east1-docker.pkg.dev/${{ vars.PROJECT_ID}}/ai-govbot-repo/ai-govbot-backend:latest
  FRONTEND_IMAGE_NAME_LATEST: us-east1-docker.pkg.dev/${{ vars.PROJECT_ID}}/ai-govbot-repo/ai-govbot-frontend:latest
  # Define K8s manifest paths
  NAMESPACE_FILE: deployment_scripts/model-deployment/k8s-namespace.yaml
  BACKEND_DEPLOYMENT_FILE: deployment_scripts/model-deployment/backend/k8s-deployment.yaml
  BACKEND_SERVICE_FILE: deployment_scripts/model-deployment/backend/k8s-service.yaml
  FRONTEND_DEPLOYMENT_FILE: deployment_scripts/model-deployment/frontend/k8s-deployment.yaml
  FRONTEND_SERVICE_FILE: deployment_scripts/model-deployment/frontend/k8s-service.yaml
  # Define Dockerfile paths
  BACKEND_DOCKERFILE: deployment_scripts/model-deployment/backend/Dockerfile
  FRONTEND_DOCKERFILE: deployment_scripts/model-deployment/frontend/Dockerfile
  # Define rollback script path
  ROLLBACK_SCRIPT_PATH: deployment_scripts/model-deployment/rollback.sh

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' 
    
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch the SHA from the workflow_run event if available
          ref: ${{ github.event.workflow_run.head_sha }}


      # --- Authenticate to Google Cloud ---
      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      # --- Install jq ---
      - name: Install jq
        run: |
         sudo apt-get update && sudo apt-get install -y jq

      # --- ADD Step to Configure Docker for GAR ---
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-east1-docker.pkg.dev --project=${{ vars.PROJECT_ID}}

      # --- Implement latest -> v1 -> v2 Tag Rotation ---
      - name: Rotate Backend Image Tags (latest->v1, v1->v2)
        # Continue even if some tags don't exist (e.g., first/second runs)
        continue-on-error: true
        run: |

          IMAGE_BASE="${{ env.BACKEND_IMAGE_NAME_NO_TAG }}"
          echo "Rotating tags for ${IMAGE_BASE}"

          # 1. Delete existing v2 tag (ignore errors if it doesn't exist)
          echo "Attempting to delete existing v2 tag..."
          gcloud artifacts docker tags delete "${IMAGE_BASE}:v2" --quiet || echo "No existing v2 tag to delete."

          # 2. Retag existing v1 to v2
          echo "Attempting to retag v1 to v2..."
          V1_DIGEST=$(gcloud artifacts docker images list "${IMAGE_BASE}" --include-tags --format=json | jq -r '.[] | select(.tags[]? == "v1") | .version' || echo "")
          if [[ -n "$V1_DIGEST" ]]; then
            echo "Found v1 digest: ${V1_DIGEST}. Tagging as v2..."
            gcloud artifacts docker tags add "${IMAGE_BASE}@${V1_DIGEST}" "${IMAGE_BASE}:v2" --quiet
            echo "Deleting old v1 tag..."
            gcloud artifacts docker tags delete "${IMAGE_BASE}:v1" --quiet
          else
            echo "No existing v1 tag found."
          fi

          # 3. Retag existing latest to v1
          echo "Attempting to retag latest to v1..."
          LATEST_DIGEST=$(gcloud artifacts docker images list "${IMAGE_BASE}" --include-tags --format=json | jq -r '.[] | select(.tags[]? == "latest") | .version' || echo "")
          if [[ -n "$LATEST_DIGEST" ]]; then
             echo "Found latest digest: ${LATEST_DIGEST}. Tagging as v1..."
             gcloud artifacts docker tags add "${IMAGE_BASE}@${LATEST_DIGEST}" "${IMAGE_BASE}:v1" --quiet
             echo "Deleting old latest tag..."
             gcloud artifacts docker tags delete "${IMAGE_BASE}:latest" --quiet
          else
             echo "No existing latest tag found."
          fi
          echo "Backend tag rotation complete."


      - name: Rotate Frontend Image Tags (latest->v1, v1->v2)
        # Repeat the same logic for the frontend image
        continue-on-error: true
        run: |
          IMAGE_BASE="${{ env.FRONTEND_IMAGE_NAME_NO_TAG }}"
          echo "Rotating tags for ${IMAGE_BASE}"

          # 1. Delete existing v2 tag (ignore errors if it doesn't exist)
          echo "Attempting to delete existing v2 tag..."
          gcloud artifacts docker tags delete "${IMAGE_BASE}:v2" --quiet || echo "No existing v2 tag to delete."

          # 2. Retag existing v1 to v2
          echo "Attempting to retag v1 to v2..."
          V1_DIGEST=$(gcloud artifacts docker images list "${IMAGE_BASE}" --include-tags --format=json | jq -r '.[] | select(.tags[]? == "v1") | .version' || echo "")
          if [[ -n "$V1_DIGEST" ]]; then
            echo "Found v1 digest: ${V1_DIGEST}. Tagging as v2..."
            gcloud artifacts docker tags add "${IMAGE_BASE}@${V1_DIGEST}" "${IMAGE_BASE}:v2" --quiet
            echo "Deleting old v1 tag..."
            gcloud artifacts docker tags delete "${IMAGE_BASE}:v1" --quiet
          else
            echo "No existing v1 tag found."
          fi

          # 3. Retag existing latest to v1
          echo "Attempting to retag latest to v1..."
          LATEST_DIGEST=$(gcloud artifacts docker images list "${IMAGE_BASE}" --include-tags --format=json | jq -r '.[] | select(.tags[]? == "latest") | .version' || echo "")
          if [[ -n "$LATEST_DIGEST" ]]; then
             echo "Found latest digest: ${LATEST_DIGEST}. Tagging as v1..."
             gcloud artifacts docker tags add "${IMAGE_BASE}@${LATEST_DIGEST}" "${IMAGE_BASE}:v1" --quiet
             echo "Deleting old latest tag..."
             gcloud artifacts docker tags delete "${IMAGE_BASE}:latest" --quiet
          else
             echo "No existing latest tag found."
          fi
          echo "Frontend tag rotation complete."


      # --- Build and Push New ':latest' Images ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Backend Image to GAR (as :latest)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.BACKEND_DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.BACKEND_IMAGE_NAME_LATEST }} # Pushes the new :latest tag

      - name: Build and Push Frontend Image to GAR (as :latest)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.FRONTEND_DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.FRONTEND_IMAGE_NAME_LATEST }} # Pushes the new :latest tag

      # --- Authenticate to GKE ---
      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.ZONE }} 
          project_id: ${{ vars.PROJECT_ID}}


      # --- Inject API Key Secret from github secrets ---
      - name: Create temporary .env file
        run: |
          echo "Creating temporary .env file..."
          # Write the secret value into the .env file in KEY=VALUE format
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_KEY }}" > .env
          echo "LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }}" >> .env
          echo "LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }}" >> .env
          echo "LANGFUSE_HOST=${{ secrets.LANGFUSE_HOST }}" >> .env
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env
          echo ".env file created."

      - name: Create/Update Kubernetes OpenAI Secret
        run: |
          echo "Creating/Updating Kubernetes secret 'openai-secret' from .env file..."
          kubectl create secret generic openai-secret \
            --from-env-file=.env \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Kubernetes secret 'openai-secret' processed."

      - name: Create google_cloud_key.json secret
        run: |
          echo "Creating google_cloud_key.json secret..."
          echo '${{ secrets.GCP_SA_KEY }}' > google_cloud_key.json
          echo "google_cloud_key.json secret created."

      - name: Create/Update Kubernetes Google Cloud Secret
        run: |
          echo "Creating/Updating Kubernetes secret 'gcp-secret' from google_cloud_key.json file..."
          kubectl create secret generic gcp-secret \
            --from-file=key.json=google_cloud_key.json \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Kubernetes secret 'gcp-secret' processed."

      # --- Apply K8s Manifests ---
      - name: Deploy to GKE
        run: |
          echo "Applying Kubernetes manifests to namespace: ${{ env.NAMESPACE }}"

          echo "Applying Namespace: ${{ env.NAMESPACE_FILE }}"
          kubectl apply -f ${{ env.NAMESPACE_FILE }}

          echo "Applying Backend Deployment: ${{ env.BACKEND_DEPLOYMENT_FILE }}"
          kubectl apply -f  ${{ env.BACKEND_DEPLOYMENT_FILE }} -n ${{ env.NAMESPACE }}
          echo "Applying Backend Service: ${{ env.BACKEND_SERVICE_FILE }}"
          kubectl apply -f ${{ env.BACKEND_SERVICE_FILE }} -n ${{ env.NAMESPACE }}

          echo "Applying Frontend Deployment: ${{ env.FRONTEND_DEPLOYMENT_FILE }}"
          kubectl apply -f ${{ env.FRONTEND_DEPLOYMENT_FILE }} -n ${{ env.NAMESPACE }}
          echo "Applying Frontend Service: ${{ env.FRONTEND_SERVICE_FILE }}"
          kubectl apply -f ${{ env.FRONTEND_SERVICE_FILE }} -n ${{ env.NAMESPACE }}

      # --- Verify Deployment Rollout ---
      - name: Verify Deployment Rollout
        run: |
          echo "Waiting for deployments to complete..."
          kubectl rollout status deployment/ai-govbot-backend-deployment -n ${{ env.NAMESPACE }} --timeout=5m
          kubectl rollout status deployment/ai-govbot-frontend-deployment -n ${{ env.NAMESPACE }} --timeout=5m
          echo "Deployment successful!"
          echo "Verifying services..."
          kubectl get services -n ${{ env.NAMESPACE }}
      
      # --- Clean up temporary .env file ---

      - name: Clean up temporary .env file
        run: |
          echo "Cleaning up temporary .env file..."
          rm -f .env
          echo ".env file removed."

     # --- ROLLBACK JOB ---
  rollback-on-failure:
    name: Rollback Deployment on Failure
    runs-on: ubuntu-latest
    # Run after build-and-deploy
    needs: [build-and-deploy]
    # IMPORTANT: Only run if the build-and-deploy job failed
    if: failure()
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # No specific ref needed, uses default branch where rollback script exists

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Make rollback script executable
        run: chmod +x ${{ env.ROLLBACK_SCRIPT_PATH }}

      - name: Execute Rollback Script
        id: rollback_script # Give step an ID to check outcome
        # Use || true so the workflow step itself doesn't fail if rollback script exits non-zero
        run: ${{ env.ROLLBACK_SCRIPT_PATH }} || true

      - name: Check Rollback Script Outcome
        # Check the exit code of the previous step ($?)
        # If the script exited non-zero (failure), mark this step as failed
        run: |
          if [[ $? -ne 0 ]]; then
            echo "Rollback script itself reported an error (exit code $?)."
            # exit 1 # Optionally fail this job if the rollback script had errors
          else
            echo "Rollback script executed (may contain internal warnings)."
          fi
  # --- Notify Job ---
  notify:
    # Run after build-and-deploy and potentially rollback-on-failure
    needs: [build-and-deploy, rollback-on-failure]
    runs-on: ubuntu-latest
    # Always run to report final status
    if: always()

    steps:
      - name: Send Deployment Status Email
        uses: dawidd6/action-send-mail@v4
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Deployment Status for main branch: ${{ needs.build-and-deploy.result }}"
          to: ${{ secrets.EMAIL_USERNAME }}
          from: ${{ secrets.EMAIL_USERNAME }}
          # Modify body based on outcomes
          body: |
            Deployment Job Status: ${{ needs.build-and-deploy.result }}

            ${{ needs.build-and-deploy.result == 'failure' && format('Rollback Job Status: {0}', needs.rollback-on-failure.result) || '' }}
            ${{ needs.build-and-deploy.result == 'failure' && format('A rollback to the previous version (v1 tagged as latest) was attempted.') || '' }}

            Check logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}